services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: backsaas-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: backsaas
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init-db.sql
      - ./scripts/seed-data.sql:/docker-entrypoint-initdb.d/02-seed-data.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d backsaas"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backsaas-network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: backsaas-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backsaas-network

  # Platform API (system tenant)
  platform-api:
    build:
      context: ./services/platform-api
      dockerfile: Dockerfile.dev
    container_name: backsaas-platform-api
    environment:
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/backsaas?sslmode=disable
      - REDIS_URL=redis://redis:6379
      - PORT=8080
      - TENANT_ID=system
      - SCHEMA_SOURCE=file
      - SCHEMA_PATH=/app/schemas/platform.yaml
      - LOG_LEVEL=debug
#    ports:
#      - "8080:8080"
    volumes:
      - ./services/platform-api:/app
      - /app/tmp  # Air temp files
      - ./schemas:/app/schemas:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - backsaas-network
    restart: unless-stopped

  # API Gateway Service
  gateway:
    build:
      context: ./services/gateway
      dockerfile: Dockerfile.dev
    container_name: backsaas-gateway
    ports:
      - "8000:8000"
    environment:
      - PORT=8000
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-dev-secret-key}
      - PLATFORM_API_URL=http://platform-api:8080
      - API_SERVICE_URL=http://platform-api:8080
      - ENVIRONMENT=development
    volumes:
      - ./services/gateway:/app
      - /app/tmp  # Air temp files
    depends_on:
      redis:
        condition: service_healthy
      platform-api:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - backsaas-network

  # Admin Console (Next.js)
  admin-console:
    build:
      context: ./apps/admin-console
      dockerfile: Dockerfile.dev
    container_name: backsaas-admin-console
    # No exposed ports - access through gateway only
    environment:
      - NODE_ENV=development
      - PLATFORM_API_URL=http://platform-api:8080
      - GATEWAY_API_URL=http://gateway:8000
      - JWT_SECRET=${JWT_SECRET:-dev-secret-key}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET:-dev-nextauth-secret}
      - NEXTAUTH_URL=http://localhost:8000/admin
    volumes:
      - ./apps/admin-console:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      platform-api:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/admin"]
      interval: 45s
      timeout: 20s
      retries: 5
      start_period: 60s
    networks:
      - backsaas-network

  # Control Plane Web UI (Schema Designer)
  control-plane:
    build:
      context: ./apps/web
      dockerfile: Dockerfile.dev
    container_name: backsaas-control-plane
    # No exposed ports - access through gateway only
    environment:
      - NODE_ENV=development
      - PLATFORM_API_URL=http://platform-api:8080
      - GATEWAY_API_URL=http://gateway:8000
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-dev-secret-key}
    volumes:
      - ./apps/web:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      platform-api:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 45s
      timeout: 20s
      retries: 5
      start_period: 60s
    networks:
      - backsaas-network

  # Tenant UI - Business interface for end users
  tenant-ui:
    build:
      context: ./apps/tenant-ui
      dockerfile: Dockerfile.dev
    container_name: backsaas-tenant-ui
    # No exposed ports - access through gateway only
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_GATEWAY_API_URL=http://localhost:8000
      - PLATFORM_API_URL=http://platform-api:8080
      - GATEWAY_API_URL=http://gateway:8000
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-dev-secret-key}
    volumes:
      - ./apps/tenant-ui:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      platform-api:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001"]
      interval: 45s
      timeout: 20s
      retries: 5
      start_period: 60s
    networks:
      - backsaas-network

  # Landing Page - Static marketing site and platform entry point
  landing-page:
    build:
      context: ./apps/landing-page
      dockerfile: Dockerfile
    container_name: backsaas-landing-page
    # No exposed ports - access through gateway only
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_GATEWAY_API_URL=http://localhost:8000
    volumes:
      - ./apps/landing-page:/app
      - /app/node_modules
      - /app/.next
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3002"]
      interval: 45s
      timeout: 20s
      retries: 5
      start_period: 60s
    networks:
      - backsaas-network

  # Health Dashboard (Coverage Reporter)
  health-dashboard:
    build:
      context: ./services/coverage-reporter
      dockerfile: Dockerfile.dev
    container_name: backsaas-health-dashboard
    # No exposed ports - access through gateway only
    environment:
      - PORT=8090
      - POSTGRES_URL=postgres://postgres:postgres@postgres:5432/backsaas?sslmode=disable
      - REDIS_URL=redis://redis:6379
      - PLATFORM_API_URL=http://platform-api:8080
    volumes:
      - ./services/coverage-reporter:/app
      - /app/tmp  # Air temp files
      - ./test-results:/test-results:ro
      - ./services:/workspace/services:ro  # Access to all service source code
      - ./apps:/workspace/apps:ro  # Access to apps
      - ./cmd:/workspace/cmd:ro  # Access to CLI
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      platform-api:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8090/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - backsaas-network

  # Test Tenant API (for testing multi-tenant setup)
  test-tenant-api:
    build:
      context: ./services/platform-api
      dockerfile: Dockerfile.dev
    container_name: backsaas-test-tenant-api
    environment:
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/backsaas?sslmode=disable
      - REDIS_URL=redis://redis:6379
      - TENANT_ID=test-tenant
      - SCHEMA_SOURCE=file
      - SCHEMA_PATH=/app/testdata/sample-crm.yaml
      - LOG_LEVEL=debug
    volumes:
      - ./services/platform-api:/app
      - /app/tmp  # Air temp files
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - backsaas-network
    restart: unless-stopped

  # Adminer for database management (development only)
  adminer:
    image: adminer:4.8.1
    container_name: backsaas-adminer
    ports:
      - "8082:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    depends_on:
      - postgres
    networks:
      - backsaas-network
    profiles:
      - dev

  # Prometheus for metrics (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: backsaas-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - backsaas-network
    profiles:
      - monitoring

  # Grafana for dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: backsaas-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - backsaas-network
    profiles:
      - monitoring

  # Test runner service for running tests within the Docker network
  test-runner:
    build:
      context: ./services/platform-api
      dockerfile: Dockerfile.test
    container_name: backsaas-test-runner
    environment:
      - TEST_DATABASE_URL=postgres://postgres:postgres@postgres:5432/backsaas?sslmode=disable
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backsaas-network
    profiles:
      - test
    command: ["sleep", "infinity"]  # Keep container running for exec commands

  # Simple test API to verify field mapping fix
  test-api:
    image: golang:1.21-alpine
    container_name: backsaas-test-api
    working_dir: /app
    environment:
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/backsaas?sslmode=disable
      - PORT=8090
    ports:
      - "8090:8090"
    volumes:
      - .:/app
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backsaas-network
    profiles:
      - test
    command: ["sh", "-c", "cd /app && go mod init test && go mod tidy && go run test-api-server.go"]

  # Example shadcn App (for comparison with admin console)
  example-app:
    image: node:18-alpine
    container_name: backsaas-example-app
    working_dir: /app
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=development
    volumes:
      - ./example-shadcn-latest:/app
      - /app/node_modules  # Prevent node_modules from being overwritten
    networks:
      - backsaas-network
    command: ["sh", "-c", "npm install && npm run dev"]
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  backsaas-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
