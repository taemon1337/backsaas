# BackSaaS Enhanced Testing Makefile
# 
# This Makefile provides comprehensive testing commands that work with
# the new Docker Compose testing infrastructure.

.PHONY: test-help test-setup test-all test-unit test-integration test-clean test-watch test-coverage test-report

# Test configuration
TEST_COMPOSE_FILE=docker-compose.test.yml
TEST_RESULTS_DIR=./test-results
TEST_NETWORK=backsaas-test-network

# Default target
test-help: ## Show testing help
	@echo "BackSaaS Testing Commands"
	@echo "========================"
	@echo ""
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  \033[36m%-20s\033[0m %s\n", $$1, $$2}' $(MAKEFILE_LIST)
	@echo ""
	@echo "Test Results: http://localhost:8888 (when test-results profile is active)"

# Setup test environment
test-setup: ## Setup isolated test environment
	@echo "🔧 Setting up test environment..."
	@mkdir -p $(TEST_RESULTS_DIR)/{unit,integration,coverage,reports}
	@docker compose -f $(TEST_COMPOSE_FILE) build
	@echo "✅ Test environment ready"

# Run all tests
test-all: test-setup ## Run all tests (unit + integration)
	@echo "🚀 Running all tests..."
	@docker compose -f $(TEST_COMPOSE_FILE) up --abort-on-container-exit test-orchestrator
	@$(MAKE) test-results-server
	@echo "🎯 All tests completed. View results at http://localhost:8888"

# Run only unit tests
test-unit: test-setup ## Run unit tests only
	@echo "🧪 Running unit tests..."
	@docker compose -f $(TEST_COMPOSE_FILE) up -d test-postgres test-redis
	@docker compose -f $(TEST_COMPOSE_FILE) up -d platform-api-tests gateway-tests api-tests cli-tests
	@echo "⏳ Waiting for services to be ready..."
	@sleep 10
	@echo "🔬 Executing unit tests..."
	@docker compose -f $(TEST_COMPOSE_FILE) exec platform-api-tests go test -v -coverprofile=/test-results/coverage/platform-api.out ./... || true
	@docker compose -f $(TEST_COMPOSE_FILE) exec gateway-tests go test -v -coverprofile=/test-results/coverage/gateway.out ./... || true
	@docker compose -f $(TEST_COMPOSE_FILE) exec api-tests go test -v -coverprofile=/test-results/coverage/api.out ./... || true
	@docker compose -f $(TEST_COMPOSE_FILE) exec cli-tests go test -v ./internal/cli/... || true
	@$(MAKE) test-results-server
	@echo "✅ Unit tests completed"

# Run only integration tests
test-integration: test-setup ## Run integration tests only
	@echo "🔗 Running integration tests..."
	@docker compose -f $(TEST_COMPOSE_FILE) up -d test-postgres test-redis
	@docker compose -f $(TEST_COMPOSE_FILE) up -d platform-api-tests
	@echo "⏳ Waiting for services to be ready..."
	@sleep 15
	@echo "🔬 Executing integration tests..."
	@docker compose -f $(TEST_COMPOSE_FILE) exec platform-api-tests go test -v ./tests/integration/... || true
	@$(MAKE) test-results-server
	@echo "✅ Integration tests completed"

# Run tests for specific service
test-service: ## Run tests for specific service (usage: make test-service SERVICE=platform-api)
	@if [ -z "$(SERVICE)" ]; then \
		echo "❌ Please specify SERVICE (e.g., make test-service SERVICE=platform-api)"; \
		exit 1; \
	fi
	@echo "🧪 Running tests for $(SERVICE)..."
	@docker compose -f $(TEST_COMPOSE_FILE) up -d test-postgres test-redis
	@docker compose -f $(TEST_COMPOSE_FILE) up -d $(SERVICE)-tests
	@echo "⏳ Waiting for services to be ready..."
	@sleep 10
	@docker compose -f $(TEST_COMPOSE_FILE) exec $(SERVICE)-tests go test -v ./...
	@echo "✅ $(SERVICE) tests completed"

# Generate coverage reports
test-coverage: ## Generate coverage reports
	@echo "📊 Generating coverage reports..."
	@docker compose -f $(TEST_COMPOSE_FILE) up -d test-postgres test-redis
	@docker compose -f $(TEST_COMPOSE_FILE) up -d platform-api-tests gateway-tests api-tests
	@echo "⏳ Waiting for services to be ready..."
	@sleep 10
	@echo "🔬 Running tests with coverage..."
	@docker compose -f $(TEST_COMPOSE_FILE) exec platform-api-tests sh -c "go test -coverprofile=/test-results/coverage/platform-api.out ./... && go tool cover -html=/test-results/coverage/platform-api.out -o /test-results/coverage/platform-api.html"
	@docker compose -f $(TEST_COMPOSE_FILE) exec gateway-tests sh -c "go test -coverprofile=/test-results/coverage/gateway.out ./... && go tool cover -html=/test-results/coverage/gateway.out -o /test-results/coverage/gateway.html"
	@docker compose -f $(TEST_COMPOSE_FILE) exec api-tests sh -c "go test -coverprofile=/test-results/coverage/api.out ./... && go tool cover -html=/test-results/coverage/api.out -o /test-results/coverage/api.html"
	@$(MAKE) test-results-server
	@echo "📈 Coverage reports available at http://localhost:8888/coverage/"

# Start test results server
test-results-server: ## Start test results server
	@echo "📊 Starting test results server..."
	@docker compose -f $(TEST_COMPOSE_FILE) --profile test-results up -d test-results-server
	@echo "🌐 Test results available at http://localhost:8888"

# Watch mode for development
test-watch: ## Run tests in watch mode (requires entr)
	@echo "👀 Starting test watch mode..."
	@echo "📝 Watching for changes in Go files..."
	@find . -name "*.go" | entr -c make test-unit

# Clean test environment
test-clean: ## Clean test environment and results
	@echo "🧹 Cleaning test environment..."
	@docker compose -f $(TEST_COMPOSE_FILE) down -v
	@docker compose -f $(TEST_COMPOSE_FILE) --profile test-results down
	@rm -rf $(TEST_RESULTS_DIR)/*
	@echo "✅ Test environment cleaned"

# Reset test database
test-db-reset: ## Reset test database
	@echo "🗄️ Resetting test database..."
	@docker compose -f $(TEST_COMPOSE_FILE) up -d test-postgres
	@sleep 5
	@docker compose -f $(TEST_COMPOSE_FILE) exec test-postgres psql -U postgres -d backsaas_test -c "SELECT testing.clean_test_data();"
	@echo "✅ Test database reset"

# Run specific test by name
test-run: ## Run specific test (usage: make test-run SERVICE=platform-api TEST=TestDatabaseOperations)
	@if [ -z "$(SERVICE)" ] || [ -z "$(TEST)" ]; then \
		echo "❌ Please specify SERVICE and TEST (e.g., make test-run SERVICE=platform-api TEST=TestDatabaseOperations)"; \
		exit 1; \
	fi
	@echo "🎯 Running specific test: $(TEST) in $(SERVICE)..."
	@docker compose -f $(TEST_COMPOSE_FILE) up -d test-postgres test-redis
	@docker compose -f $(TEST_COMPOSE_FILE) up -d $(SERVICE)-tests
	@sleep 10
	@docker compose -f $(TEST_COMPOSE_FILE) exec $(SERVICE)-tests go test -v -run $(TEST) ./...

# Benchmark tests
test-benchmark: ## Run benchmark tests
	@echo "⚡ Running benchmark tests..."
	@docker compose -f $(TEST_COMPOSE_FILE) up -d test-postgres test-redis
	@docker compose -f $(TEST_COMPOSE_FILE) up -d platform-api-tests gateway-tests api-tests
	@sleep 10
	@docker compose -f $(TEST_COMPOSE_FILE) exec platform-api-tests go test -bench=. -benchmem ./...
	@docker compose -f $(TEST_COMPOSE_FILE) exec gateway-tests go test -bench=. -benchmem ./...
	@docker compose -f $(TEST_COMPOSE_FILE) exec api-tests go test -bench=. -benchmem ./...

# Test with race detection
test-race: ## Run tests with race detection
	@echo "🏃 Running tests with race detection..."
	@docker compose -f $(TEST_COMPOSE_FILE) up -d test-postgres test-redis
	@docker compose -f $(TEST_COMPOSE_FILE) up -d platform-api-tests gateway-tests api-tests
	@sleep 10
	@docker compose -f $(TEST_COMPOSE_FILE) exec platform-api-tests go test -race -v ./...
	@docker compose -f $(TEST_COMPOSE_FILE) exec gateway-tests go test -race -v ./...
	@docker compose -f $(TEST_COMPOSE_FILE) exec api-tests go test -race -v ./...

# Show test logs
test-logs: ## Show test logs
	@echo "📋 Showing test logs..."
	@docker compose -f $(TEST_COMPOSE_FILE) logs --tail=100 -f

# Show test status
test-status: ## Show test environment status
	@echo "📊 Test Environment Status"
	@echo "=========================="
	@docker compose -f $(TEST_COMPOSE_FILE) ps
	@echo ""
	@echo "Test Results Directory:"
	@ls -la $(TEST_RESULTS_DIR)/ 2>/dev/null || echo "No test results yet"

# Validate test configuration
test-validate: ## Validate test configuration
	@echo "✅ Validating test configuration..."
	@docker compose -f $(TEST_COMPOSE_FILE) config --quiet
	@echo "✅ Test configuration is valid"

# Quick smoke test
test-smoke: ## Run quick smoke tests
	@echo "💨 Running smoke tests..."
	@docker compose -f $(TEST_COMPOSE_FILE) up -d test-postgres test-redis
	@docker compose -f $(TEST_COMPOSE_FILE) up -d platform-api-tests
	@sleep 10
	@docker compose -f $(TEST_COMPOSE_FILE) exec platform-api-tests go test -short ./...
	@echo "✅ Smoke tests completed"

# CLI End-to-End Tests
test-e2e: ## Run CLI-based end-to-end platform tests
	@echo "🎯 Running CLI-based end-to-end tests..."
	@docker compose -f $(TEST_COMPOSE_FILE) --profile e2e up --abort-on-container-exit cli-e2e-tests
	@echo "✅ CLI E2E tests completed"

test-cli-platform: ## Run CLI platform tests within Docker network
	@echo "🏗️  Running CLI platform tests..."
	@docker compose -f $(TEST_COMPOSE_FILE) up -d test-postgres test-redis platform-api-tests cli-tests
	@sleep 15
	@docker compose -f $(TEST_COMPOSE_FILE) exec cli-tests sh -c "cd /app && go build -o backsaas . && ./backsaas test platform --timeout=5m --cleanup=true"
	@echo "✅ CLI platform tests completed"

test-cli-tenant-lifecycle: ## Run CLI tenant lifecycle tests
	@echo "🏢 Running CLI tenant lifecycle tests..."
	@docker compose -f $(TEST_COMPOSE_FILE) up -d test-postgres test-redis platform-api-tests cli-tests
	@sleep 15
	@docker compose -f $(TEST_COMPOSE_FILE) exec cli-tests sh -c "cd /app && go build -o backsaas . && ./backsaas test tenant-lifecycle --timeout=5m"
	@echo "✅ CLI tenant lifecycle tests completed"

test-cli-interactive: ## Start interactive CLI testing environment
	@echo "🔧 Starting interactive CLI testing environment..."
	@docker compose -f $(TEST_COMPOSE_FILE) up -d test-postgres test-redis platform-api-tests cli-tests
	@sleep 15
	@echo "🎯 CLI testing environment ready!"
	@echo "   Run: docker compose -f $(TEST_COMPOSE_FILE) exec cli-tests sh"
	@echo "   Then: cd /app && go build -o backsaas . && ./backsaas test --help"
